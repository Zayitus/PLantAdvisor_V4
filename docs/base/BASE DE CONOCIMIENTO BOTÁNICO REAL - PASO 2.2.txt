"""
BASE DE CONOCIMIENTO BOT√ÅNICO REAL - PASO 2.2
=============================================

FUNDAMENTO ACAD√âMICO (Clase 3):
"El conocimiento del dominio se representa en forma de reglas de producci√≥n 
del tipo 'SI...ENTONCES'. Estas reglas codifican el conocimiento y la 
experiencia de los expertos humanos"

TRANSFORMACI√ìN CR√çTICA:
‚ùå ANTES: Base de datos simple con atributos est√°ticos
‚úÖ AHORA: Reglas de producci√≥n con conocimiento experto real

REFERENCIA: Conocimiento heur√≠stico de expertos bot√°nicos especializados en TDF
"""

from typing import Dict, List, Any, Optional
from sintaxis_reglas_academicas import (
    ReglaProduccionAcademica, CondicionRegla, AccionRegla,
    OperadorCondicion, TipoAccion
)


class BaseConocimientoBotanicoTDF:
    """
    BASE DE CONOCIMIENTO BOT√ÅNICO ACAD√âMICA PARA TIERRA DEL FUEGO
    
    FUNDAMENTO TE√ìRICO: Esta clase representa conocimiento experto real
    sobre bot√°nica, especialmente adaptado a las condiciones extremas
    de Tierra del Fuego.
    
    FUENTES DE CONOCIMIENTO:
    - INTA (Instituto Nacional de Tecnolog√≠a Agropecuaria)
    - Expertos bot√°nicos regionales
    - Literatura cient√≠fica sobre flora patag√≥nica
    - Experiencia pr√°ctica en condiciones TDF
    
    DIFERENCIA CR√çTICA CON ENFOQUE ANTERIOR:
    - No almacena "datos" sino "reglas de conocimiento"
    - Representa relaciones causales reales
    - Incluye heur√≠sticas y conocimiento t√°cito
    - Maneja incertidumbre y excepciones
    """
    
    def __init__(self):
        """INICIALIZAR BASE DE CONOCIMIENTO ACAD√âMICA"""
        self.reglas = []
        self.metadatos = {
            'version': '2.0_academica',
            'ultima_actualizacion': '2025-07-01',
            'fuentes': [
                'INTA Tierra del Fuego',
                'Jard√≠n Bot√°nico de Ushuaia', 
                'Expertos locales en flora patag√≥nica',
                'Literatura cient√≠fica regional'
            ],
            'total_reglas': 0,
            'dominios_conocimiento': [
                'condiciones_ambientales_tdf',
                'interacciones_calefaccion_plantas',
                'resistencia_vientos_patagonicos',
                'adaptacion_humedad_baja',
                'seguridad_mascotas',
                'mantenimiento_principiantes'
            ]
        }
        
        # Crear reglas de conocimiento experto
        self._crear_reglas_condiciones_ambientales()
        self._crear_reglas_factores_tdf()
        self._crear_reglas_interacciones_complejas()
        self._crear_reglas_seguridad_mascotas()
        self._crear_reglas_mantenimiento_expertise()
        self._crear_reglas_recomendacion_final()
        
        self.metadatos['total_reglas'] = len(self.reglas)
        
        print(f"üåø BASE DE CONOCIMIENTO BOT√ÅNICO TDF INICIALIZADA")
        print(f"üìö {len(self.reglas)} reglas de conocimiento experto cargadas")
        print(f"üèîÔ∏è Especializada en condiciones extremas de Tierra del Fuego")
    
    def _crear_reglas_condiciones_ambientales(self):
        """
        REGLAS DE CONDICIONES AMBIENTALES ESPEC√çFICAS
        
        CONOCIMIENTO EXPERTO: Las condiciones ambientales de TDF son √∫nicas
        en el mundo debido a su latitud extrema y condiciones clim√°ticas.
        """
        
        # REGLA: Detecci√≥n de ambiente interior TDF en invierno
        self.reglas.append(ReglaProduccionAcademica(
            id="R001_AMBIENTE_INTERIOR_TDF_INVIERNO",
            nombre="Detecci√≥n de Ambiente Interior TDF en Invierno",
            descripcion="Identifica condiciones espec√≠ficas de interiores en TDF durante invierno",
            dominio="condiciones_ambientales_tdf",
            fuente_conocimiento="INTA TDF - Estudios microclim√°ticos interiores",
            
            condiciones=[
                CondicionRegla(
                    predicado="ubicacion_usuario",
                    operador=OperadorCondicion.IGUAL,
                    valor="interior",
                    explicacion="Usuario en ambiente interior"
                ),
                CondicionRegla(
                    predicado="calefaccion_nivel",
                    operador=OperadorCondicion.EN,
                    valor=["alta", "muy_alta"],
                    explicacion="Calefacci√≥n intensa t√≠pica de TDF (mayo-septiembre)"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="ambiente_seco_extremo",
                    valor=True,
                    confianza=0.9,
                    explicacion="Calefacci√≥n TDF genera sequedad extrema (humedad <30%)"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="temperatura_estable_artificial",
                    valor=True,
                    confianza=0.85,
                    explicacion="Temperatura interior estable pero artificial en TDF"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="variacion_luz_extrema_estacional",
                    valor=True,
                    confianza=0.95,
                    explicacion="TDF tiene variaci√≥n lum√≠nica extrema: 4h luz invierno, 20h verano"
                )
            ],
            
            prioridad=8.0
        ))
        
        # REGLA: An√°lisis de iluminaci√≥n natural deficiente TDF
        self.reglas.append(ReglaProduccionAcademica(
            id="R002_ILUMINACION_DEFICIENTE_TDF",
            nombre="An√°lisis de Iluminaci√≥n Natural Deficiente en TDF",
            descripcion="Eval√∫a la deficiencia lum√≠nica caracter√≠stica de TDF en invierno",
            dominio="condiciones_ambientales_tdf",
            fuente_conocimiento="SMN Argentina - Datos heliof√©rmicos TDF",
            
            condiciones=[
                CondicionRegla(
                    predicado="ubicacion_usuario",
                    operador=OperadorCondicion.IGUAL,
                    valor="interior",
                    explicacion="Ambiente interior"
                ),
                CondicionRegla(
                    predicado="iluminacion_disponible",
                    operador=OperadorCondicion.EN,
                    valor=["escasa", "escasa-media"],
                    explicacion="Iluminaci√≥n natural limitada (t√≠pico TDF invierno)"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="requiere_plantas_baja_luminosidad",
                    valor=True,
                    confianza=0.88,
                    explicacion="Necesidad de plantas adaptadas a poca luz natural"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="fotosintesis_limitada",
                    valor=True,
                    confianza=0.8,
                    explicacion="Fotos√≠ntesis reducida por baja radiaci√≥n solar TDF"
                )
            ],
            
            prioridad=6.0
        ))
    
    def _crear_reglas_factores_tdf(self):
        """
        REGLAS ESPEC√çFICAS DE FACTORES TIERRA DEL FUEGO
        
        CONOCIMIENTO EXPERTO: TDF presenta desaf√≠os √∫nicos para la bot√°nica
        debido a su ubicaci√≥n geogr√°fica extrema.
        """
        
        # REGLA: S√≠ndrome de calefacci√≥n intensa TDF
        self.reglas.append(ReglaProduccionAcademica(
            id="R003_SINDROME_CALEFACCION_TDF",
            nombre="S√≠ndrome de Calefacci√≥n Intensa TDF",
            descripcion="Identifica el efecto espec√≠fico de calefacci√≥n a le√±a/gas en TDF",
            dominio="factores_tdf",
            fuente_conocimiento="Viveros especializados TDF - Experiencia pr√°ctica",
            
            condiciones=[
                CondicionRegla(
                    predicado="ambiente_seco_extremo",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    explicacion="Ambiente con sequedad extrema identificada"
                ),
                CondicionRegla(
                    predicado="temperatura_estable_artificial",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    explicacion="Temperatura mantenida artificialmente"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="estres_hidrico_plantas",
                    valor="alto",
                    confianza=0.85,
                    explicacion="Estr√©s h√≠drico alto en plantas por calefacci√≥n intensa"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="necesita_plantas_crasas_resistentes",
                    valor=True,
                    confianza=0.82,
                    explicacion="Preferencia por plantas crasas y suculentas resistentes"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="riego_frecuente_necesario",
                    valor=False,
                    confianza=0.75,
                    explicacion="Plantas resistentes necesitan MENOS riego, no m√°s"
                )
            ],
            
            prioridad=7.5
        ))
        
        # REGLA: Plantas resistentes a vientos patag√≥nicos (exterior)
        self.reglas.append(ReglaProduccionAcademica(
            id="R004_RESISTENCIA_VIENTOS_PATAGONICOS",
            nombre="Resistencia a Vientos Patag√≥nicos",
            descripcion="Eval√∫a resistencia necesaria para vientos de hasta 120 km/h",
            dominio="factores_tdf",
            fuente_conocimiento="Estaci√≥n Meteorol√≥gica Ushuaia - Datos hist√≥ricos vientos",
            
            condiciones=[
                CondicionRegla(
                    predicado="ubicacion_usuario",
                    operador=OperadorCondicion.IGUAL,
                    valor="exterior",
                    explicacion="Plantas de exterior expuestas a vientos"
                ),
                CondicionRegla(
                    predicado="zona_geografica",
                    operador=OperadorCondicion.EN,
                    valor=["patagonia", "tierra_del_fuego"],
                    explicacion="Zona geogr√°fica con vientos patag√≥nicos"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="requiere_raices_profundas",
                    valor=True,
                    confianza=0.9,
                    explicacion="Plantas necesitan sistema radicular profundo y fuerte"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="preferencia_plantas_bajas",
                    valor=True,
                    confianza=0.85,
                    explicacion="Plantas bajas y compactas resisten mejor vientos"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="descarta_plantas_altas_fragiles",
                    valor=True,
                    confianza=0.88,
                    explicacion="Plantas altas y fr√°giles no sobreviven vientos patag√≥nicos"
                )
            ],
            
            prioridad=8.5
        ))
    
    def _crear_reglas_interacciones_complejas(self):
        """
        REGLAS DE INTERACCIONES COMPLEJAS ENTRE FACTORES
        
        CONOCIMIENTO EXPERTO: Las interacciones entre m√∫ltiples factores
        ambientales crean condiciones √∫nicas que requieren an√°lisis sist√©mico.
        """
        
        # REGLA: Interacci√≥n calefacci√≥n + baja humedad + poca luz
        self.reglas.append(ReglaProduccionAcademica(
            id="R005_INTERACCION_TRIPLE_TDF",
            nombre="Interacci√≥n Triple: Calefacci√≥n + Baja Humedad + Poca Luz",
            descripcion="Analiza la interacci√≥n compleja de factores adversos en TDF",
            dominio="interacciones_complejas",
            fuente_conocimiento="S√≠ntesis experiencia expertos bot√°nicos TDF",
            
            condiciones=[
                CondicionRegla(
                    predicado="ambiente_seco_extremo",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    peso=2.0,
                    explicacion="Ambiente extremadamente seco"
                ),
                CondicionRegla(
                    predicado="requiere_plantas_baja_luminosidad",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    peso=1.5,
                    explicacion="Poca luz natural disponible"
                ),
                CondicionRegla(
                    predicado="estres_hidrico_plantas",
                    operador=OperadorCondicion.IGUAL,
                    valor="alto",
                    peso=2.0,
                    explicacion="Alto estr√©s h√≠drico por calefacci√≥n"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="condiciones_extremas_multiples",
                    valor=True,
                    confianza=0.92,
                    explicacion="M√∫ltiples factores adversos simult√°neos"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="requiere_plantas_ultra_resistentes",
                    valor=True,
                    confianza=0.88,
                    explicacion="Solo plantas ultra-resistentes sobrevivir√°n"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="prioridad_sansevieria_zamioculcas",
                    valor=True,
                    confianza=0.9,
                    explicacion="Sansevieria y Zamioculcas son las m√°s resistentes a estas condiciones"
                )
            ],
            
            prioridad=9.0
        ))
        
        # REGLA: Compensaci√≥n mantenimiento vs condiciones adversas
        self.reglas.append(ReglaProduccionAcademica(
            id="R006_COMPENSACION_MANTENIMIENTO_CONDICIONES",
            nombre="Compensaci√≥n Mantenimiento vs Condiciones Adversas",
            descripcion="Balancea nivel de mantenimiento disponible con adversidad ambiental",
            dominio="interacciones_complejas",
            fuente_conocimiento="Experiencia pr√°ctica usuarios TDF",
            
            condiciones=[
                CondicionRegla(
                    predicado="condiciones_extremas_multiples",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    explicacion="Condiciones ambientales extremas identificadas"
                ),
                CondicionRegla(
                    predicado="mantenimiento_disponible",
                    operador=OperadorCondicion.IGUAL,
                    valor="bajo",
                    explicacion="Usuario con poco tiempo/conocimiento para mantenimiento"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="solo_plantas_autonomas",
                    valor=True,
                    confianza=0.95,
                    explicacion="Solo recomendar plantas pr√°cticamente aut√≥nomas"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="descarta_plantas_mantenimiento_alto",
                    valor=True,
                    confianza=0.9,
                    explicacion="Descartar todas las plantas que requieren mantenimiento alto"
                )
            ],
            
            prioridad=8.0
        ))
    
    def _crear_reglas_seguridad_mascotas(self):
        """
        REGLAS DE SEGURIDAD PARA MASCOTAS
        
        CONOCIMIENTO EXPERTO: Toxicidad de plantas es cr√≠tica para seguridad
        de mascotas, especialmente en ambientes cerrados de TDF.
        """
        
        # REGLA: Seguridad absoluta mascotas
        self.reglas.append(ReglaProduccionAcademica(
            id="R007_SEGURIDAD_ABSOLUTA_MASCOTAS",
            nombre="Seguridad Absoluta para Mascotas",
            descripcion="Elimina plantas t√≥xicas cuando hay mascotas presentes",
            dominio="seguridad_mascotas",
            fuente_conocimiento="ASPCA - Lista plantas t√≥xicas para mascotas",
            
            condiciones=[
                CondicionRegla(
                    predicado="mascotas_presentes",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    peso=3.0,  # Peso m√°ximo - seguridad cr√≠tica
                    explicacion="Hay mascotas en el hogar"
                ),
                CondicionRegla(
                    predicado="planta_toxica_mascotas",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    variable="planta_evaluada",
                    explicacion="Planta espec√≠fica es t√≥xica para mascotas"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="planta_descartada_toxicidad",
                    valor="$planta_evaluada",
                    confianza=1.0,  # Certeza absoluta
                    explicacion="Planta descartada por seguridad de mascotas"
                ),
                AccionRegla(
                    tipo=TipoAccion.RETRACT,
                    predicado="planta_candidata",
                    valor="$planta_evaluada",
                    confianza=1.0,
                    explicacion="Eliminada de candidatas por toxicidad"
                )
            ],
            
            prioridad=10.0  # M√°xima prioridad - seguridad
        ))
    
    def _crear_reglas_mantenimiento_expertise(self):
        """
        REGLAS DE EXPERTISE EN MANTENIMIENTO
        
        CONOCIMIENTO EXPERTO: Matching entre nivel de experiencia del usuario
        y requerimientos reales de mantenimiento de plantas.
        """
        
        # REGLA: Usuario principiante + condiciones dif√≠ciles
        self.reglas.append(ReglaProduccionAcademica(
            id="R008_PRINCIPIANTE_CONDICIONES_DIFICILES",
            nombre="Usuario Principiante en Condiciones Dif√≠ciles",
            descripci√≥n="Protege a usuarios principiantes de fracasos con plantas dif√≠ciles",
            dominio="mantenimiento_expertise",
            fuente_conocimiento="Viveros locales TDF - Experiencia con clientes",
            
            condiciones=[
                CondicionRegla(
                    predicado="mantenimiento_disponible",
                    operador=OperadorCondicion.IGUAL,
                    valor="bajo",
                    explicacion="Usuario principiante o con poco tiempo"
                ),
                CondicionRegla(
                    predicado="condiciones_extremas_multiples",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    explicacion="Condiciones ambientales desafiantes"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="recomendar_solo_ultra_faciles",
                    valor=True,
                    confianza=0.9,
                    explicacion="Solo plantas pr√°cticamente indestructibles"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="incluir_consejos_supervivencia",
                    valor=True,
                    confianza=0.85,
                    explicacion="Incluir consejos espec√≠ficos para supervivencia en TDF"
                )
            ],
            
            prioridad=7.0
        ))
    
    def _crear_reglas_recomendacion_final(self):
        """
        REGLAS DE RECOMENDACI√ìN FINAL
        
        CONOCIMIENTO EXPERTO: S√≠ntesis final que combina todos los factores
        para generar recomendaciones fundamentadas.
        """
        
        # REGLA: Recomendaci√≥n Sansevieria para condiciones extremas TDF
        self.reglas.append(ReglaProduccionAcademica(
            id="R009_RECOMENDACION_SANSEVIERIA_TDF",
            nombre="Recomendaci√≥n Sansevieria para Condiciones Extremas TDF",
            descripcion="Regla espec√≠fica para Sansevieria en condiciones adversas TDF",
            dominio="recomendacion_final",
            fuente_conocimiento="Consenso expertos bot√°nicos TDF",
            
            condiciones=[
                CondicionRegla(
                    predicado="requiere_plantas_ultra_resistentes",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    explicacion="Condiciones requieren plantas ultra-resistentes"
                ),
                CondicionRegla(
                    predicado="solo_plantas_autonomas",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    explicacion="Se necesitan plantas aut√≥nomas"
                ),
                CondicionRegla(
                    predicado="planta_evaluada",
                    operador=OperadorCondicion.IGUAL,
                    valor="sansevieria",
                    variable="planta_actual",
                    explicacion="Evaluando espec√≠ficamente Sansevieria"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.RECOMMEND,
                    predicado="planta_altamente_recomendada",
                    valor="sansevieria",
                    confianza=0.95,
                    explicacion="Sansevieria es ideal para condiciones extremas TDF"
                ),
                AccionRegla(
                    tipo=TipoAccion.CONCLUDE,
                    predicado="justificacion_recomendacion",
                    valor="Resiste sequedad extrema, poca luz, y calefacci√≥n intensa",
                    confianza=0.9,
                    explicacion="Justificaci√≥n cient√≠fica de la recomendaci√≥n"
                )
            ],
            
            prioridad=10.0
        ))
        
        # REGLA: Recomendaci√≥n m√∫ltiple para usuarios experimentados
        self.reglas.append(ReglaProduccionAcademica(
            id="R010_RECOMENDACION_USUARIO_EXPERIMENTADO",
            nombre="Recomendaci√≥n para Usuario Experimentado",
            descripci√≥n="Permite plantas m√°s desafiantes para usuarios con experiencia",
            dominio="recomendacion_final",
            fuente_conocimiento="Jardineros experimentados TDF",
            
            condiciones=[
                CondicionRegla(
                    predicado="mantenimiento_disponible",
                    operador=OperadorCondicion.IGUAL,
                    valor="alto",
                    explicacion="Usuario con experiencia y tiempo disponible"
                ),
                CondicionRegla(
                    predicado="ubicacion_compatible",
                    operador=OperadorCondicion.IGUAL,
                    valor=True,
                    explicacion="Ubicaci√≥n es compatible"
                ),
                CondicionRegla(
                    predicado="planta_descartada_toxicidad",
                    operador=OperadorCondicion.NO_EXISTE,
                    valor="$planta_actual",
                    explicacion="Planta no descartada por toxicidad"
                )
            ],
            
            acciones=[
                AccionRegla(
                    tipo=TipoAccion.RECOMMEND,
                    predicado="planta_recomendada_avanzada",
                    valor="$planta_actual",
                    confianza=0.8,
                    explicacion="Planta recomendada para usuario experimentado"
                ),
                AccionRegla(
                    tipo=TipoAccion.ASSERT,
                    predicado="incluir_consejos_avanzados",
                    valor=True,
                    confianza=0.75,
                    explicacion="Incluir consejos de cuidado avanzado para TDF"
                )
            ],
            
            prioridad=6.0
        ))
    
    def obtener_reglas(self) -> List[ReglaProduccionAcademica]:
        """OBTENER TODAS LAS REGLAS DE PRODUCCI√ìN"""
        return self.reglas.copy()
    
    def obtener_reglas_por_dominio(self, dominio: str) -> List[ReglaProduccionAcademica]:
        """OBTENER REGLAS DE UN DOMINIO ESPEC√çFICO"""
        return [regla for regla in self.reglas if regla.dominio == dominio]
    
    def obtener_metadatos(self) -> Dict[str, Any]:
        """OBTENER METADATOS DE LA BASE DE CONOCIMIENTO"""
        return self.metadatos.copy()
    
    def validar_consistencia(self) -> List[str]:
        """VALIDAR CONSISTENCIA DE LA BASE DE CONOCIMIENTO"""
        errores = []
        
        # Validar cada regla individualmente
        for regla in self.reglas:
            errores_regla = regla.validar_sintaxis()
            for error in errores_regla:
                errores.append(f"Regla {regla.id}: {error}")
        
        # Validar unicidad de IDs
        ids_vistos = set()
        for regla in self.reglas:
            if regla.id in ids_vistos:
                errores.append(f"ID duplicado: {regla.id}")
            ids_vistos.add(regla.id)
        
        return errores
    
    def generar_reporte_conocimiento(self) -> Dict[str, Any]:
        """GENERAR REPORTE COMPLETO DE LA BASE DE CONOCIMIENTO"""
        dominios = {}
        for regla in self.reglas:
            if regla.dominio not in dominios:
                dominios[regla.dominio] = []
            dominios[regla.dominio].append(regla.id)
        
        return {
            'metadatos': self.metadatos,
            'total_reglas': len(self.reglas),
            'reglas_por_dominio': dominios,
            'reglas_alta_prioridad': [
                regla.id for regla in self.reglas if regla.prioridad >= 8.0
            ],
            'validacion_consistencia': self.validar_consistencia()
        }


# ===================================================================
# DEMOSTRACI√ìN DE TRANSFORMACI√ìN ACAD√âMICA
# ===================================================================

def demostrar_transformacion_academica():
    """
    DEMOSTRACI√ìN DE TRANSFORMACI√ìN DE DATOS EN CONOCIMIENTO
    
    Muestra c√≥mo hemos transformado una base de datos simple en una
    base de conocimiento experto real.
    """
    print("üéì DEMOSTRACI√ìN: TRANSFORMACI√ìN DATOS ‚Üí CONOCIMIENTO EXPERTO")
    print("="*70)
    
    # Crear base de conocimiento
    base_conocimiento = BaseConocimientoBotanicoTDF()
    
    # Generar reporte
    reporte = base_conocimiento.generar_reporte_conocimiento()
    
    print("\nüìä REPORTE DE BASE DE CONOCIMIENTO ACAD√âMICA:")
    print("-" * 50)
    print(f"üìö Total reglas: {reporte['total_reglas']}")
    print(f"üèóÔ∏è Dominios de conocimiento: {len(reporte['reglas_por_dominio'])}")
    
    print(f"\nüéØ DOMINIOS IMPLEMENTADOS:")
    for dominio, reglas in reporte['reglas_por_dominio'].items():
        print(f"   {dominio}: {len(reglas)} reglas")
    
    print(f"\n‚ö° REGLAS DE ALTA PRIORIDAD:")
    for regla_id in reporte['reglas_alta_prioridad']:
        print(f"   {regla_id}")
    
    # Validar consistencia
    errores = reporte['validacion_consistencia']
    print(f"\n‚úÖ VALIDACI√ìN DE CONSISTENCIA:")
    if errores:
        print("‚ùå Errores encontrados:")
        for error in errores:
            print(f"   - {error}")
    else:
        print("‚úÖ Base de conocimiento consistente")
    
    # Mostrar ejemplo de regla acad√©mica
    print(f"\nüìã EJEMPLO DE REGLA ACAD√âMICA:")
    print("-" * 40)
    regla_ejemplo = base_conocimiento.obtener_reglas()[0]
    print(f"ID: {regla_ejemplo.id}")
    print(f"Nombre: {regla_ejemplo.nombre}")
    print(f"Dominio: {regla_ejemplo.dominio}")
    print(f"Fuente: {regla_ejemplo.fuente_conocimiento}")
    print(f"Explicaci√≥n: {regla_ejemplo.generar_explicacion_natural()}")
    
    print("\nüéØ COMPARACI√ìN CR√çTICA:")
    print("-" * 30)
    print("‚ùå ANTES (datos simples):")
    print("   'sansevieria': {'ubicacion': 'interior', 'espacio': 'mediano'}")
    print("\n‚úÖ AHORA (conocimiento experto):")
    print("   'SI ambiente_seco_extremo Y requiere_plantas_ultra_resistentes")
    print("    ENTONCES recomendar sansevieria CON confianza 0.95")
    print("    PORQUE resiste sequedad extrema y calefacci√≥n intensa TDF'")
    
    print("\n‚úÖ TRANSFORMACI√ìN ACAD√âMICA COMPLETADA")
    print("üìö Datos simples ‚Üí Conocimiento experto real")
    print("üèõÔ∏è Cumple fundamentos de Clase 3")
    
    return base_conocimiento


if __name__ == "__main__":
    base_conocimiento = demostrar_transformacion_academica()
    print("\nüöÄ BASE DE CONOCIMIENTO BOT√ÅNICO LISTA PARA INTEGRACI√ìN")