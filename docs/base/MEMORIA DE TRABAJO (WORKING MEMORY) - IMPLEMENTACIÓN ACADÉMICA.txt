"""
MEMORIA DE TRABAJO (WORKING MEMORY) - IMPLEMENTACIÓN ACADÉMICA
==============================================================

FUNDAMENTO TEÓRICO (Clase 3 - Figura 6):
"Memoria de trabajo: Almacena los hechos conocidos y las conclusiones 
inferidas durante el proceso de razonamiento"

REFERENCIA: Giarratano & Riley - "Expert Systems: Principles and Programming"
ARQUITECTURA: Basada en sistemas clásicos MYCIN/DENDRAL

Esta implementación sigue estrictamente los principios académicos:
1. Separación clara entre hechos iniciales y derivados
2. Capacidad de rastrear origen de cada hecho
3. Gestión de ciclo de vida de hechos durante inferencia
4. Soporte para explicación y justificación
"""

from typing import Dict, List, Any, Optional, Set
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum


class TipoHecho(Enum):
    """
    FUNDAMENTO ACADÉMICO: Los sistemas expertos distinguen entre diferentes 
    tipos de hechos para el proceso de inferencia.
    
    REFERENCIA: Clase 3 - "hechos conocidos y conclusiones inferidas"
    """
    INICIAL = "inicial"           # Hechos proporcionados por el usuario
    DERIVADO = "derivado"         # Hechos inferidos por reglas
    CONCLUSION = "conclusion"     # Conclusiones finales del sistema


@dataclass
class Hecho:
    """
    REPRESENTACIÓN ACADÉMICA DE UN HECHO EN MEMORIA DE TRABAJO
    
    FUNDAMENTO TEÓRICO: En sistemas expertos clásicos, cada hecho debe 
    tener trazabilidad completa para explicación y justificación.
    
    COMPONENTES ESENCIALES (según literatura académica):
    - Identificador único
    - Valor del hecho  
    - Tipo (inicial/derivado/conclusión)
    - Origen (regla que lo derivó)
    - Timestamp para conflict resolution
    """
    id: str                           # Identificador único del hecho
    predicado: str                    # Nombre del predicado (ej: "ubicacion_compatible")
    valor: Any                        # Valor del hecho
    tipo: TipoHecho                   # Clasificación del hecho
    origen: Optional[str] = None      # ID de regla que derivó este hecho
    timestamp: datetime = field(default_factory=datetime.now)
    justificacion: str = ""           # Explicación de por qué existe este hecho
    confianza: float = 1.0           # Factor de certeza (0.0 - 1.0)


class MemoriaTrabajo:
    """
    MEMORIA DE TRABAJO ACADÉMICA - IMPLEMENTACIÓN RIGUROSA
    
    FUNDAMENTO TEÓRICO (Clase 3):
    "La memoria de trabajo almacena los hechos conocidos y las conclusiones 
    inferidas durante el proceso de razonamiento"
    
    CARACTERÍSTICAS ACADÉMICAS IMPLEMENTADAS:
    1. Gestión separada de hechos iniciales vs derivados
    2. Capacidad de rastreo completo para explicación
    3. Soporte para factores de certeza
    4. Gestión de consistencia y contradicciones
    5. Interfaz para conflict resolution
    
    REFERENCIA: Arquitectura basada en MYCIN (Stanford, 1972)
    """
    
    def __init__(self):
        """
        INICIALIZACIÓN DE MEMORIA DE TRABAJO
        
        COMPONENTES ACADÉMICOS:
        - hechos: Almacén principal de hechos activos
        - historial: Registro completo para explicación
        - indices: Estructuras de acceso eficiente
        """
        # ALMACÉN PRINCIPAL DE HECHOS ACTIVOS
        self._hechos: Dict[str, Hecho] = {}
        
        # HISTORIAL COMPLETO PARA EXPLICACIÓN
        self._historial: List[Hecho] = []
        
        # ÍNDICES PARA ACCESO EFICIENTE
        self._indice_por_predicado: Dict[str, Set[str]] = {}
        self._indice_por_tipo: Dict[TipoHecho, Set[str]] = {
            TipoHecho.INICIAL: set(),
            TipoHecho.DERIVADO: set(),
            TipoHecho.CONCLUSION: set()
        }
        
        # CONTADOR PARA IDs ÚNICOS
        self._contador_hechos = 0
        
        print("🧠 MEMORIA DE TRABAJO INICIALIZADA")
        print("📚 Implementación académica basada en Clase 3")
        print("🏛️ Arquitectura: MYCIN/DENDRAL heritage")
    
    def assert_hecho_inicial(self, predicado: str, valor: Any, justificacion: str = "") -> str:
        """
        INSERTAR HECHO INICIAL EN MEMORIA DE TRABAJO
        
        FUNDAMENTO ACADÉMICO: Los hechos iniciales son proporcionados por el 
        usuario y forman la base para la inferencia.
        
        Args:
            predicado: Nombre del predicado (ej: "ubicacion_usuario")
            valor: Valor del hecho
            justificacion: Explicación del origen
            
        Returns:
            str: ID único del hecho insertado
            
        REFERENCIA: Clase 3 - "hechos conocidos"
        """
        hecho_id = self._generar_id_hecho()
        
        hecho = Hecho(
            id=hecho_id,
            predicado=predicado,
            valor=valor,
            tipo=TipoHecho.INICIAL,
            justificacion=justificacion or f"Hecho inicial proporcionado por usuario"
        )
        
        self._insertar_hecho(hecho)
        
        print(f"✅ HECHO INICIAL: {predicado} = {valor}")
        return hecho_id
    
    def assert_hecho_derivado(self, predicado: str, valor: Any, regla_origen: str, 
                             justificacion: str = "", confianza: float = 1.0) -> str:
        """
        INSERTAR HECHO DERIVADO EN MEMORIA DE TRABAJO
        
        FUNDAMENTO ACADÉMICO: Los hechos derivados son inferidos por reglas 
        durante el proceso de razonamiento y deben mantener trazabilidad.
        
        Args:
            predicado: Nombre del predicado derivado
            valor: Valor inferido
            regla_origen: ID de la regla que derivó este hecho
            justificacion: Explicación de la derivación
            confianza: Factor de certeza (0.0 - 1.0)
            
        Returns:
            str: ID único del hecho derivado
            
        REFERENCIA: Clase 3 - "conclusiones inferidas durante el proceso de razonamiento"
        """
        hecho_id = self._generar_id_hecho()
        
        hecho = Hecho(
            id=hecho_id,
            predicado=predicado,
            valor=valor,
            tipo=TipoHecho.DERIVADO,
            origen=regla_origen,
            justificacion=justificacion or f"Derivado por regla {regla_origen}",
            confianza=confianza
        )
        
        self._insertar_hecho(hecho)
        
        print(f"🔍 HECHO DERIVADO: {predicado} = {valor} (por {regla_origen})")
        return hecho_id
    
    def assert_conclusion(self, predicado: str, valor: Any, regla_origen: str,
                         justificacion: str = "", confianza: float = 1.0) -> str:
        """
        INSERTAR CONCLUSIÓN FINAL EN MEMORIA DE TRABAJO
        
        FUNDAMENTO ACADÉMICO: Las conclusiones son resultados finales del 
        proceso de inferencia que constituyen la respuesta del sistema experto.
        
        REFERENCIA: Clase 3 - Sistemas expertos generan conclusiones justificadas
        """
        hecho_id = self._generar_id_hecho()
        
        hecho = Hecho(
            id=hecho_id,
            predicado=predicado,
            valor=valor,
            tipo=TipoHecho.CONCLUSION,
            origen=regla_origen,
            justificacion=justificacion or f"Conclusión derivada por {regla_origen}",
            confianza=confianza
        )
        
        self._insertar_hecho(hecho)
        
        print(f"🎯 CONCLUSIÓN: {predicado} = {valor} (confianza: {confianza})")
        return hecho_id
    
    def obtener_hecho(self, predicado: str) -> Optional[Hecho]:
        """
        OBTENER HECHO POR PREDICADO
        
        FUNDAMENTO ACADÉMICO: El motor de inferencia necesita acceso eficiente 
        a hechos para evaluación de condiciones de reglas.
        """
        hechos_predicado = self._indice_por_predicado.get(predicado, set())
        
        if hechos_predicado:
            # Retornar el hecho más reciente (mayor timestamp)
            hecho_mas_reciente = max(
                (self._hechos[hid] for hid in hechos_predicado),
                key=lambda h: h.timestamp
            )
            return hecho_mas_reciente
        
        return None
    
    def obtener_hechos_por_tipo(self, tipo: TipoHecho) -> List[Hecho]:
        """
        OBTENER HECHOS POR TIPO
        
        FUNDAMENTO ACADÉMICO: Diferentes fases del ciclo de inferencia requieren 
        acceso a diferentes tipos de hechos.
        """
        hechos_ids = self._indice_por_tipo.get(tipo, set())
        return [self._hechos[hid] for hid in hechos_ids]
    
    def obtener_todos_los_hechos(self) -> List[Hecho]:
        """
        OBTENER TODOS LOS HECHOS ACTIVOS
        
        Para inspección y debugging del estado de memoria.
        """
        return list(self._hechos.values())
    
    def existe_hecho(self, predicado: str, valor: Any = None) -> bool:
        """
        VERIFICAR EXISTENCIA DE HECHO
        
        FUNDAMENTO ACADÉMICO: Las condiciones de reglas requieren verificación 
        de existencia de hechos específicos en memoria.
        """
        hecho = self.obtener_hecho(predicado)
        
        if hecho is None:
            return False
        
        if valor is not None:
            return hecho.valor == valor
        
        return True
    
    def limpiar_memoria(self):
        """
        LIMPIAR MEMORIA DE TRABAJO
        
        FUNDAMENTO ACADÉMICO: Entre consultas, la memoria debe ser reinicializada 
        para evitar interferencia entre sesiones de razonamiento.
        """
        self._hechos.clear()
        self._historial.clear()
        self._indice_por_predicado.clear()
        self._indice_por_tipo = {
            TipoHecho.INICIAL: set(),
            TipoHecho.DERIVADO: set(),
            TipoHecho.CONCLUSION: set()
        }
        self._contador_hechos = 0
        
        print("🧹 MEMORIA DE TRABAJO LIMPIADA")
    
    def generar_trace_explicacion(self) -> Dict[str, Any]:
        """
        GENERAR TRACE PARA EXPLICACIÓN
        
        FUNDAMENTO ACADÉMICO: "Los sistemas expertos pueden explicar 
        detalladamente su proceso de razonamiento"
        
        REFERENCIA: Clase 3 - Capacidades de explicación
        """
        return {
            'total_hechos': len(self._hechos),
            'hechos_iniciales': len(self._indice_por_tipo[TipoHecho.INICIAL]),
            'hechos_derivados': len(self._indice_por_tipo[TipoHecho.DERIVADO]),
            'conclusiones': len(self._indice_por_tipo[TipoHecho.CONCLUSION]),
            'historial_completo': [
                {
                    'id': h.id,
                    'predicado': h.predicado,
                    'valor': h.valor,
                    'tipo': h.tipo.value,
                    'origen': h.origen,
                    'justificacion': h.justificacion,
                    'timestamp': h.timestamp.isoformat(),
                    'confianza': h.confianza
                }
                for h in self._historial
            ]
        }
    
    def _insertar_hecho(self, hecho: Hecho):
        """
        INSERCIÓN INTERNA DE HECHO CON MANTENIMIENTO DE ÍNDICES
        
        FUNDAMENTO ACADÉMICO: Acceso eficiente a hechos es crítico para 
        performance del motor de inferencia.
        """
        # Insertar en almacén principal
        self._hechos[hecho.id] = hecho
        
        # Agregar al historial
        self._historial.append(hecho)
        
        # Mantener índices
        if hecho.predicado not in self._indice_por_predicado:
            self._indice_por_predicado[hecho.predicado] = set()
        self._indice_por_predicado[hecho.predicado].add(hecho.id)
        
        self._indice_por_tipo[hecho.tipo].add(hecho.id)
    
    def _generar_id_hecho(self) -> str:
        """GENERAR ID ÚNICO PARA HECHO"""
        self._contador_hechos += 1
        return f"F{self._contador_hechos:04d}"
    
    def __str__(self) -> str:
        """REPRESENTACIÓN TEXTUAL DE LA MEMORIA"""
        return f"MemoriaTrabajo(hechos={len(self._hechos)}, iniciales={len(self._indice_por_tipo[TipoHecho.INICIAL])}, derivados={len(self._indice_por_tipo[TipoHecho.DERIVADO])}, conclusiones={len(self._indice_por_tipo[TipoHecho.CONCLUSION])})"


# ===================================================================
# EJEMPLO DE USO ACADÉMICO
# ===================================================================

if __name__ == "__main__":
    print("🎓 TESTING MEMORIA DE TRABAJO ACADÉMICA")
    print("="*50)
    
    # Crear memoria de trabajo
    memoria = MemoriaTrabajo()
    
    # Insertar hechos iniciales (datos del usuario)
    memoria.assert_hecho_inicial("ubicacion_usuario", "interior", 
                                "Usuario indicó que vive en interior")
    memoria.assert_hecho_inicial("espacio_disponible", "mediano",
                                "Usuario indicó que tiene espacio mediano")
    
    # Simular hechos derivados (inferencia)
    memoria.assert_hecho_derivado("planta_compatible_ubicacion", True,
                                 "R001_UBICACION",
                                 "Planta Sansevieria es compatible con interior")
    
    # Simular conclusión final
    memoria.assert_conclusion("recomendar_sansevieria", True,
                             "R_FINAL_001",
                             "Todas las condiciones se cumplen para Sansevieria",
                             confianza=0.95)
    
    # Mostrar estado de memoria
    print(f"\n📊 ESTADO DE MEMORIA: {memoria}")
    
    # Generar trace de explicación
    trace = memoria.generar_trace_explicacion()
    print(f"\n📋 TRACE GENERADO: {trace['total_hechos']} hechos totales")
    
    print("\n✅ MEMORIA DE TRABAJO ACADÉMICA VALIDADA")