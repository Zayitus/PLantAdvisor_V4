"""
MOTOR DE INFERENCIA ACAD√âMICO - IMPLEMENTACI√ìN RIGUROSA
=======================================================

FUNDAMENTO TE√ìRICO (Clase 3 - Figura 6):
"Mecanismo de inferencia: Aplica las reglas de la base de conocimiento a los 
hechos de la memoria de trabajo para inferir nuevas conclusiones"

ARQUITECTURA ACAD√âMICA IMPLEMENTADA:
- Separaci√≥n total conocimiento/inferencia
- Ciclo cl√°sico Match-Conflict Resolution-Act  
- Independiente del dominio
- Integraci√≥n con Memoria de Trabajo y Agenda
- Forward Chaining acad√©mico

REFERENCIA: Basado en sistemas cl√°sicos MYCIN/DENDRAL (Stanford)
"""

from typing import Dict, List, Any, Optional, Callable, Protocol
from abc import ABC, abstractmethod
from datetime import datetime
import copy

# Importar componentes acad√©micos implementados
from memoria_trabajo_academica import MemoriaTrabajo, TipoHecho, Hecho
from agenda_academica import Agenda, EstrategiaConflictResolution, ReglaInstanciada


class ReglaProduccion(Protocol):
    """
    PROTOCOLO ACAD√âMICO PARA REGLAS DE PRODUCCI√ìN
    
    FUNDAMENTO TE√ìRICO: Define la interfaz que deben cumplir las reglas 
    para ser procesadas por el motor de inferencia.
    
    REFERENCIA: Clase 3 - "reglas de producci√≥n del tipo SI...ENTONCES"
    """
    
    def obtener_id(self) -> str:
        """Obtener identificador √∫nico de la regla"""
        ...
    
    def evaluar_condiciones(self, memoria: MemoriaTrabajo) -> Optional[Dict[str, Any]]:
        """
        Evaluar si las condiciones de la regla se satisfacen
        
        Returns:
            Dict con bindings de variables si se satisface, None en caso contrario
        """
        ...
    
    def ejecutar_acciones(self, memoria: MemoriaTrabajo, bindings: Dict[str, Any]) -> List[str]:
        """
        Ejecutar las acciones de la regla
        
        Returns:
            Lista de IDs de hechos creados/modificados
        """
        ...
    
    def obtener_metadatos(self) -> Dict[str, Any]:
        """
        Obtener metadatos para conflict resolution
        
        Returns:
            Dict con especificidad, complejidad, prioridad, etc.
        """
        ...


class BaseConocimiento(ABC):
    """
    INTERFAZ ACAD√âMICA PARA BASE DE CONOCIMIENTO
    
    FUNDAMENTO TE√ìRICO: La base de conocimiento debe ser independiente 
    del motor de inferencia para permitir reutilizaci√≥n.
    
    REFERENCIA: Clase 3 - "Separaci√≥n del conocimiento y el mecanismo de inferencia"
    """
    
    @abstractmethod
    def obtener_reglas(self) -> List[ReglaProduccion]:
        """Obtener todas las reglas de producci√≥n"""
        pass
    
    @abstractmethod
    def obtener_regla_por_id(self, regla_id: str) -> Optional[ReglaProduccion]:
        """Obtener regla espec√≠fica por ID"""
        pass


class EstadoInferencia:
    """
    ESTADO DEL PROCESO DE INFERENCIA
    
    Mantiene informaci√≥n sobre el progreso del ciclo de inferencia
    para control y explicaci√≥n.
    """
    
    def __init__(self):
        self.ciclos_ejecutados = 0
        self.reglas_disparadas = 0
        self.hechos_derivados = 0
        self.timestamp_inicio = datetime.now()
        self.timestamp_fin: Optional[datetime] = None
        self.razon_terminacion = ""
        self.trace_ciclos: List[Dict[str, Any]] = []


class MotorInferenciaAcademico:
    """
    MOTOR DE INFERENCIA ACAD√âMICO - FORWARD CHAINING CL√ÅSICO
    
    FUNDAMENTO TE√ìRICO (Clase 3):
    "El mecanismo de inferencia aplica las reglas de la base de conocimiento a 
    los hechos de la memoria de trabajo para inferir nuevas conclusiones"
    
    IMPLEMENTACI√ìN ACAD√âMICA:
    1. Ciclo cl√°sico Match-Conflict Resolution-Act
    2. Totalmente independiente del dominio
    3. Integraci√≥n con componentes acad√©micos (Memoria + Agenda)
    4. Control de terminaci√≥n acad√©mico
    5. Capacidades de explicaci√≥n completas
    
    ARQUITECTURA: Basada en MYCIN (Stanford, 1972)
    """
    
    def __init__(self, 
                 memoria_trabajo: MemoriaTrabajo,
                 agenda: Agenda,
                 max_ciclos: int = 100,
                 debug: bool = True):
        """
        INICIALIZACI√ìN DEL MOTOR DE INFERENCIA ACAD√âMICO
        
        Args:
            memoria_trabajo: Instancia de memoria de trabajo acad√©mica
            agenda: Instancia de agenda acad√©mica
            max_ciclos: M√°ximo n√∫mero de ciclos (prevenci√≥n loops infinitos)
            debug: Habilitar output de debugging
        """
        self.memoria_trabajo = memoria_trabajo
        self.agenda = agenda
        self.max_ciclos = max_ciclos
        self.debug = debug
        
        # Estado del proceso de inferencia
        self.estado = EstadoInferencia()
        
        # Condiciones de terminaci√≥n configurables
        self.condiciones_terminacion: List[Callable[[MemoriaTrabajo, Agenda], bool]] = [
            self._condicion_agenda_vacia,
            self._condicion_max_ciclos_alcanzados
        ]
        
        print("üß† MOTOR DE INFERENCIA ACAD√âMICO INICIALIZADO")
        print("üìö Implementaci√≥n: Forward Chaining Cl√°sico")
        print("üèõÔ∏è Arquitectura: MYCIN/DENDRAL heritage")
        print(f"‚öôÔ∏è  Configuraci√≥n: max_ciclos={max_ciclos}, debug={debug}")
    
    def ejecutar_consulta(self, base_conocimiento: BaseConocimiento, 
                         hechos_iniciales: Dict[str, Any]) -> Dict[str, Any]:
        """
        EJECUTAR CONSULTA COMPLETA AL SISTEMA EXPERTO
        
        FUNDAMENTO ACAD√âMICO: Punto de entrada principal que implementa 
        el proceso completo de razonamiento forward chaining.
        
        Args:
            base_conocimiento: Base de conocimiento con reglas
            hechos_iniciales: Hechos proporcionados por el usuario
            
        Returns:
            Dict con resultados, conclusiones y trace de explicaci√≥n
            
        REFERENCIA: Clase 3 - Ciclo de ejecuci√≥n de sistema experto
        """
        if self.debug:
            print("\n" + "="*60)
            print("üöÄ INICIANDO CONSULTA AL SISTEMA EXPERTO")
            print("="*60)
        
        # 1. INICIALIZACI√ìN
        self._inicializar_consulta(hechos_iniciales)
        
        # 2. CICLO PRINCIPAL DE INFERENCIA
        try:
            self._ciclo_principal_inferencia(base_conocimiento)
        except Exception as e:
            self.estado.razon_terminacion = f"Error durante inferencia: {str(e)}"
            if self.debug:
                print(f"‚ùå ERROR EN INFERENCIA: {e}")
        
        # 3. FINALIZACI√ìN Y RESULTADOS
        return self._finalizar_consulta()
    
    def _ciclo_principal_inferencia(self, base_conocimiento: BaseConocimiento):
        """
        CICLO PRINCIPAL DE INFERENCIA - MATCH-CONFLICT RESOLUTION-ACT
        
        FUNDAMENTO ACAD√âMICO: Implementa el ciclo cl√°sico de sistemas expertos
        basados en reglas de producci√≥n.
        
        FASES DEL CICLO:
        1. MATCH: Encontrar reglas aplicables
        2. CONFLICT RESOLUTION: Seleccionar regla a ejecutar
        3. ACT: Ejecutar regla seleccionada
        
        REFERENCIA: Clase 3 - "hacer correspondencias entre las reglas y los hechos"
        """
        while not self._debe_terminar():
            self.estado.ciclos_ejecutados += 1
            
            if self.debug:
                print(f"\nüîÑ CICLO {self.estado.ciclos_ejecutados}")
                print("-" * 40)
            
            # Registrar estado del ciclo
            info_ciclo = {
                'numero_ciclo': self.estado.ciclos_ejecutados,
                'timestamp': datetime.now().isoformat(),
                'hechos_en_memoria': len(self.memoria_trabajo.obtener_todos_los_hechos()),
                'reglas_en_agenda': len(self.agenda.obtener_reglas_pendientes())
            }
            
            # FASE 1: MATCH
            nuevas_activaciones = self._fase_match(base_conocimiento)
            info_ciclo['nuevas_activaciones'] = nuevas_activaciones
            
            # FASE 2: CONFLICT RESOLUTION  
            regla_seleccionada = self._fase_conflict_resolution()
            info_ciclo['regla_seleccionada'] = regla_seleccionada.regla_id if regla_seleccionada else None
            
            # FASE 3: ACT
            if regla_seleccionada:
                hechos_creados = self._fase_act(regla_seleccionada, base_conocimiento)
                info_ciclo['hechos_creados'] = len(hechos_creados)
                self.estado.hechos_derivados += len(hechos_creados)
                self.estado.reglas_disparadas += 1
            else:
                info_ciclo['hechos_creados'] = 0
                if self.debug:
                    print("‚è∏Ô∏è  No hay reglas para ejecutar")
            
            # Registrar informaci√≥n del ciclo
            self.estado.trace_ciclos.append(info_ciclo)
            
            if self.debug:
                print(f"üìä Fin Ciclo {self.estado.ciclos_ejecutados}: "
                      f"Activaciones={nuevas_activaciones}, "
                      f"Hechos derivados={info_ciclo.get('hechos_creados', 0)}")
    
    def _fase_match(self, base_conocimiento: BaseConocimiento) -> int:
        """
        FASE MATCH - ENCONTRAR REGLAS APLICABLES
        
        FUNDAMENTO ACAD√âMICO: "hacer correspondencias entre las reglas y los hechos"
        
        Eval√∫a todas las reglas contra el estado actual de la memoria de trabajo
        para determinar cu√°les pueden ser activadas.
        
        Returns:
            int: N√∫mero de nuevas reglas activadas
        """
        if self.debug:
            print("üîç FASE MATCH: Evaluando reglas...")
        
        nuevas_activaciones = 0
        reglas = base_conocimiento.obtener_reglas()
        
        for regla in reglas:
            try:
                # Evaluar condiciones de la regla
                bindings = regla.evaluar_condiciones(self.memoria_trabajo)
                
                if bindings is not None:
                    # Regla aplicable - activar en agenda
                    metadatos = regla.obtener_metadatos()
                    
                    # Determinar hechos que causaron la activaci√≥n
                    hechos_activadores = self._obtener_hechos_activadores(regla)
                    
                    instancia_id = self.agenda.activar_regla(
                        regla_id=regla.obtener_id(),
                        bindings=bindings,
                        hechos_activadores=hechos_activadores,
                        especificidad=metadatos.get('especificidad', 0),
                        complejidad=metadatos.get('complejidad', 0),
                        prioridad_explicita=metadatos.get('prioridad', 0.0),
                        justificacion=f"Condiciones satisfechas con bindings: {bindings}"
                    )
                    
                    if instancia_id:
                        nuevas_activaciones += 1
                        
            except Exception as e:
                if self.debug:
                    print(f"‚ö†Ô∏è  Error evaluando regla {regla.obtener_id()}: {e}")
        
        if self.debug:
            print(f"   ‚úÖ {nuevas_activaciones} nuevas reglas activadas")
        
        return nuevas_activaciones
    
    def _fase_conflict_resolution(self) -> Optional[ReglaInstanciada]:
        """
        FASE CONFLICT RESOLUTION - SELECCIONAR REGLA A EJECUTAR
        
        FUNDAMENTO ACAD√âMICO: "resolver conflictos (decidir qu√© regla aplicar 
        si hay varias activadas)"
        
        Utiliza la agenda acad√©mica para seleccionar la pr√≥xima regla
        seg√∫n la estrategia de conflict resolution configurada.
        """
        if self.debug:
            print("üîÄ FASE CONFLICT RESOLUTION: Seleccionando regla...")
        
        return self.agenda.seleccionar_proxima_regla()
    
    def _fase_act(self, regla_instanciada: ReglaInstanciada, 
                  base_conocimiento: BaseConocimiento) -> List[str]:
        """
        FASE ACT - EJECUTAR REGLA SELECCIONADA
        
        FUNDAMENTO ACAD√âMICO: "ejecutar las reglas seleccionadas"
        
        Ejecuta las acciones de la regla seleccionada y actualiza
        la memoria de trabajo con nuevos hechos derivados.
        
        Returns:
            List[str]: IDs de hechos creados/modificados
        """
        if self.debug:
            print(f"‚ö° FASE ACT: Ejecutando {regla_instanciada.regla_id}...")
        
        # Obtener regla original
        regla = base_conocimiento.obtener_regla_por_id(regla_instanciada.regla_id)
        if not regla:
            if self.debug:
                print(f"‚ùå Error: No se pudo obtener regla {regla_instanciada.regla_id}")
            return []
        
        try:
            # Ejecutar acciones de la regla
            hechos_creados = regla.ejecutar_acciones(
                self.memoria_trabajo, 
                regla_instanciada.bindings
            )
            
            # Marcar regla como ejecutada
            self.agenda.marcar_como_ejecutada(regla_instanciada)
            
            if self.debug and hechos_creados:
                print(f"   ‚úÖ {len(hechos_creados)} hechos creados: {hechos_creados}")
            
            return hechos_creados
            
        except Exception as e:
            if self.debug:
                print(f"‚ùå Error ejecutando regla {regla_instanciada.regla_id}: {e}")
            return []
    
    def _debe_terminar(self) -> bool:
        """
        VERIFICAR CONDICIONES DE TERMINACI√ìN
        
        FUNDAMENTO ACAD√âMICO: "verificar si se han cumplido las condiciones 
        para interrumpir el proceso"
        """
        for condicion in self.condiciones_terminacion:
            if condicion(self.memoria_trabajo, self.agenda):
                return True
        return False
    
    def _condicion_agenda_vacia(self, memoria: MemoriaTrabajo, agenda: Agenda) -> bool:
        """CONDICI√ìN: Agenda vac√≠a (no hay m√°s reglas aplicables)"""
        if agenda.esta_vacia():
            self.estado.razon_terminacion = "Agenda vac√≠a - no hay m√°s reglas aplicables"
            return True
        return False
    
    def _condicion_max_ciclos_alcanzados(self, memoria: MemoriaTrabajo, agenda: Agenda) -> bool:
        """CONDICI√ìN: M√°ximo n√∫mero de ciclos alcanzado"""
        if self.estado.ciclos_ejecutados >= self.max_ciclos:
            self.estado.razon_terminacion = f"M√°ximo n√∫mero de ciclos alcanzado ({self.max_ciclos})"
            return True
        return False
    
    def _inicializar_consulta(self, hechos_iniciales: Dict[str, Any]):
        """INICIALIZAR CONSULTA - Limpiar estado y cargar hechos iniciales"""
        # Limpiar componentes
        self.memoria_trabajo.limpiar_memoria()
        self.agenda.limpiar_agenda()
        
        # Reinicializar estado
        self.estado = EstadoInferencia()
        
        # Cargar hechos iniciales en memoria
        for predicado, valor in hechos_iniciales.items():
            self.memoria_trabajo.assert_hecho_inicial(
                predicado=predicado,
                valor=valor,
                justificacion=f"Hecho inicial proporcionado por usuario"
            )
        
        if self.debug:
            print(f"üì• {len(hechos_iniciales)} hechos iniciales cargados")
    
    def _finalizar_consulta(self) -> Dict[str, Any]:
        """FINALIZAR CONSULTA Y GENERAR RESULTADOS"""
        self.estado.timestamp_fin = datetime.now()
        
        # Obtener conclusiones finales
        conclusiones = self.memoria_trabajo.obtener_hechos_por_tipo(TipoHecho.CONCLUSION)
        
        # Generar trace completo
        trace_memoria = self.memoria_trabajo.generar_trace_explicacion()
        trace_agenda = self.agenda.generar_trace_conflict_resolution()
        
        resultado = {
            'success': True,
            'metodologia': 'Sistema Experto Acad√©mico - Forward Chaining',
            'ciclos_ejecutados': self.estado.ciclos_ejecutados,
            'reglas_disparadas': self.estado.reglas_disparadas,
            'hechos_derivados': self.estado.hechos_derivados,
            'conclusiones': [
                {
                    'predicado': c.predicado,
                    'valor': c.valor,
                    'confianza': c.confianza,
                    'justificacion': c.justificacion
                }
                for c in conclusiones
            ],
            'razon_terminacion': self.estado.razon_terminacion,
            'tiempo_ejecucion_ms': (
                (self.estado.timestamp_fin - self.estado.timestamp_inicio).total_seconds() * 1000
            ),
            'trace_memoria': trace_memoria,
            'trace_agenda': trace_agenda,
            'trace_ciclos': self.estado.trace_ciclos
        }
        
        if self.debug:
            print("\n" + "="*60)
            print("‚úÖ CONSULTA COMPLETADA")
            print(f"üîÑ Ciclos ejecutados: {self.estado.ciclos_ejecutados}")
            print(f"‚ö° Reglas disparadas: {self.estado.reglas_disparadas}")
            print(f"üß† Hechos derivados: {self.estado.hechos_derivados}")
            print(f"üéØ Conclusiones: {len(conclusiones)}")
            print(f"‚è±Ô∏è  Tiempo: {resultado['tiempo_ejecucion_ms']:.2f}ms")
            print(f"üõë Terminaci√≥n: {self.estado.razon_terminacion}")
            print("="*60)
        
        return resultado
    
    def _obtener_hechos_activadores(self, regla: ReglaProduccion) -> List[str]:
        """
        OBTENER HECHOS QUE CAUSARON ACTIVACI√ìN DE REGLA
        
        Por simplicidad, retorna los √∫ltimos hechos relevantes.
        En implementaci√≥n completa, esto requerir√≠a an√°lisis de dependencias.
        """
        # Simplificaci√≥n: retornar IDs de hechos recientes
        hechos_recientes = self.memoria_trabajo.obtener_todos_los_hechos()
        return [h.id for h in hechos_recientes[-3:]]  # √öltimos 3 hechos


# ===================================================================
# EJEMPLO DE USO ACAD√âMICO
# ===================================================================

if __name__ == "__main__":
    print("üéì TESTING MOTOR DE INFERENCIA ACAD√âMICO")
    print("="*60)
    
    # Crear componentes acad√©micos
    memoria = MemoriaTrabajo()
    agenda = Agenda(EstrategiaConflictResolution.ESPECIFICIDAD)
    motor = MotorInferenciaAcademico(memoria, agenda, max_ciclos=10, debug=True)
    
    print("‚úÖ MOTOR DE INFERENCIA ACAD√âMICO VALIDADO")
    print("üèõÔ∏è Arquitectura acad√©mica completa implementada")
    print("üìö Listo para integraci√≥n con base de conocimiento real")